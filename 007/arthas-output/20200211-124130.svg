<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (2,735 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (2,704 samples, 98.87%)</title><rect x="10.0" y="1283.0" width="1166.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (6 samples, 0.22%)</title><rect x="10.0" y="1267.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (6 samples, 0.22%)</title><rect x="10.0" y="1251.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (6 samples, 0.22%)</title><rect x="10.0" y="1235.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (6 samples, 0.22%)</title><rect x="10.0" y="1219.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (4 samples, 0.15%)</title><rect x="10.0" y="1203.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (4 samples, 0.15%)</title><rect x="10.0" y="1187.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (4 samples, 0.15%)</title><rect x="10.0" y="1171.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (4 samples, 0.15%)</title><rect x="10.0" y="1155.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1139.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1123.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1107.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (4 samples, 0.15%)</title><rect x="10.0" y="1091.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1075.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1059.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (4 samples, 0.15%)</title><rect x="10.0" y="1043.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelRead (4 samples, 0.15%)</title><rect x="10.0" y="1027.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.receive (4 samples, 0.15%)</title><rect x="10.0" y="1011.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushDataIfNecessary (4 samples, 0.15%)</title><rect x="10.0" y="995.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (4 samples, 0.15%)</title><rect x="10.0" y="979.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (4 samples, 0.15%)</title><rect x="10.0" y="963.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (4 samples, 0.15%)</title><rect x="10.0" y="947.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (4 samples, 0.15%)</title><rect x="10.0" y="931.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (4 samples, 0.15%)</title><rect x="10.0" y="915.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (4 samples, 0.15%)</title><rect x="10.0" y="899.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (4 samples, 0.15%)</title><rect x="10.0" y="883.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (4 samples, 0.15%)</title><rect x="10.0" y="867.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (4 samples, 0.15%)</title><rect x="10.0" y="851.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (4 samples, 0.15%)</title><rect x="10.0" y="835.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (4 samples, 0.15%)</title><rect x="10.0" y="819.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (4 samples, 0.15%)</title><rect x="10.0" y="803.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>io/termd/core/readline/EventQueue.hasNext (1 samples, 0.04%)</title><rect x="10.0" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>io/termd/core/readline/EventQueue.peek (1 samples, 0.04%)</title><rect x="10.0" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>io/termd/core/readline/EventQueue.match (1 samples, 0.04%)</title><rect x="10.0" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (3 samples, 0.11%)</title><rect x="10.4" y="787.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.4" y="798.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (3 samples, 0.11%)</title><rect x="10.4" y="771.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.4" y="782.0"></text>
</g>
<g>
<title>io/termd/core/readline/functions/Complete.apply (3 samples, 0.11%)</title><rect x="10.4" y="755.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="766.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionHandler.accept (3 samples, 0.11%)</title><rect x="10.4" y="739.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.4" y="750.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionHandler.accept (3 samples, 0.11%)</title><rect x="10.4" y="723.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.4" y="734.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/CommandManagerCompletionHandler.handle (3 samples, 0.11%)</title><rect x="10.4" y="707.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.4" y="718.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/CommandManagerCompletionHandler.handle (3 samples, 0.11%)</title><rect x="10.4" y="691.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.4" y="702.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.complete (3 samples, 0.11%)</title><rect x="10.4" y="675.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.4" y="686.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.completeSingleCommand (3 samples, 0.11%)</title><rect x="10.4" y="659.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="670.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.complete (2 samples, 0.07%)</title><rect x="10.4" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.4" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.complete (2 samples, 0.07%)</title><rect x="10.4" y="627.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/cli/CompletionUtils.complete (2 samples, 0.07%)</title><rect x="10.4" y="611.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.4" y="622.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/CommandCompletion.complete (2 samples, 0.07%)</title><rect x="10.4" y="595.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.4" y="606.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.complete (2 samples, 0.07%)</title><rect x="10.4" y="579.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.4" y="590.0"></text>
</g>
<g>
<title>io/termd/core/readline/Completion.suggest (2 samples, 0.07%)</title><rect x="10.4" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.4" y="574.0"></text>
</g>
<g>
<title>io/termd/core/readline/Completion.suggest (2 samples, 0.07%)</title><rect x="10.4" y="547.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="558.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.redraw (2 samples, 0.07%)</title><rect x="10.4" y="531.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer.update (2 samples, 0.07%)</title><rect x="10.4" y="515.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.4" y="526.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer$Update.perform (2 samples, 0.07%)</title><rect x="10.4" y="499.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.4" y="510.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.07%)</title><rect x="10.4" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.07%)</title><rect x="10.4" y="467.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.4" y="478.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (2 samples, 0.07%)</title><rect x="10.4" y="451.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.4" y="462.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.07%)</title><rect x="10.4" y="435.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.4" y="446.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.07%)</title><rect x="10.4" y="419.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.4" y="430.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (2 samples, 0.07%)</title><rect x="10.4" y="403.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="414.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (2 samples, 0.07%)</title><rect x="10.4" y="387.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.4" y="398.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.write (2 samples, 0.07%)</title><rect x="10.4" y="371.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="382.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/NettyTelnetConnection.send (2 samples, 0.07%)</title><rect x="10.4" y="355.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="366.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.07%)</title><rect x="10.4" y="339.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.4" y="350.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.07%)</title><rect x="10.4" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.4" y="334.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.07%)</title><rect x="10.4" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.4" y="318.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.07%)</title><rect x="10.4" y="291.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.4" y="302.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.04%)</title><rect x="10.4" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="286.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (1 samples, 0.04%)</title><rect x="10.4" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.4" y="270.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (1 samples, 0.04%)</title><rect x="10.4" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="254.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (1 samples, 0.04%)</title><rect x="10.4" y="227.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="238.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (1 samples, 0.04%)</title><rect x="10.4" y="211.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="222.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (1 samples, 0.04%)</title><rect x="10.4" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.4" y="206.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (1 samples, 0.04%)</title><rect x="10.4" y="179.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.4" y="190.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.04%)</title><rect x="10.9" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="286.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (1 samples, 0.04%)</title><rect x="10.9" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.9" y="270.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (1 samples, 0.04%)</title><rect x="10.9" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="254.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.filterOutboundMessage (1 samples, 0.04%)</title><rect x="10.9" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.9" y="238.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.newDirectBuffer (1 samples, 0.04%)</title><rect x="10.9" y="211.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="10.9" y="195.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="10.9" y="179.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.9" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (1 samples, 0.04%)</title><rect x="10.9" y="163.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.9" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (1 samples, 0.04%)</title><rect x="10.9" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.9" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (1 samples, 0.04%)</title><rect x="10.9" y="131.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.9" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (1 samples, 0.04%)</title><rect x="10.9" y="115.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.9" y="126.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (1 samples, 0.04%)</title><rect x="10.9" y="99.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="110.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (1 samples, 0.04%)</title><rect x="10.9" y="83.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="94.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache$Entry.recycle (1 samples, 0.04%)</title><rect x="10.9" y="67.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.9" y="78.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (1 samples, 0.04%)</title><rect x="10.9" y="51.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.9" y="62.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (1 samples, 0.04%)</title><rect x="10.9" y="35.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.9" y="46.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.getCommand (1 samples, 0.04%)</title><rect x="11.3" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.3" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.name (1 samples, 0.04%)</title><rect x="11.3" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.3" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.shouldOverridesName (1 samples, 0.04%)</title><rect x="11.3" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethod (1 samples, 0.04%)</title><rect x="11.3" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.3" y="606.0"></text>
</g>
<g>
<title>java/lang/NoSuchMethodException.&lt;init&gt; (1 samples, 0.04%)</title><rect x="11.3" y="579.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ReflectiveOperationException.&lt;init&gt; (1 samples, 0.04%)</title><rect x="11.3" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.04%)</title><rect x="11.3" y="547.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.04%)</title><rect x="11.3" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.04%)</title><rect x="11.3" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.3" y="526.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.04%)</title><rect x="11.3" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.3" y="510.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.04%)</title><rect x="11.3" y="483.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="14.3" y="494.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.04%)</title><rect x="11.3" y="467.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="14.3" y="478.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (1 samples, 0.04%)</title><rect x="11.3" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.3" y="462.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (1 samples, 0.04%)</title><rect x="11.3" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.3" y="446.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (1 samples, 0.04%)</title><rect x="11.3" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.3" y="430.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (1 samples, 0.04%)</title><rect x="11.3" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.3" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.04%)</title><rect x="11.3" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.3" y="398.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.select (1 samples, 0.04%)</title><rect x="11.7" y="1203.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.7" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.select (1 samples, 0.04%)</title><rect x="11.7" y="1187.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.04%)</title><rect x="11.7" y="1171.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.04%)</title><rect x="11.7" y="1155.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.7" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.04%)</title><rect x="11.7" y="1139.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.7" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.04%)</title><rect x="11.7" y="1123.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.04%)</title><rect x="11.7" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.7" y="1118.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.04%)</title><rect x="11.7" y="1091.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.7" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (1 samples, 0.04%)</title><rect x="12.2" y="1203.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.2" y="1214.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (1 samples, 0.04%)</title><rect x="12.2" y="1187.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="1198.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run (1 samples, 0.04%)</title><rect x="12.2" y="1171.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.2" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteAndFlushTask.write (1 samples, 0.04%)</title><rect x="12.2" y="1155.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write (1 samples, 0.04%)</title><rect x="12.2" y="1139.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.2" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1700 (1 samples, 0.04%)</title><rect x="12.2" y="1123.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.04%)</title><rect x="12.2" y="1107.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.04%)</title><rect x="12.2" y="1091.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (1 samples, 0.04%)</title><rect x="12.2" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.2" y="1086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (1 samples, 0.04%)</title><rect x="12.2" y="1059.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="1070.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.filterOutboundMessage (1 samples, 0.04%)</title><rect x="12.2" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="1054.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.newDirectBuffer (1 samples, 0.04%)</title><rect x="12.2" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="12.2" y="1011.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.2" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="12.2" y="995.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (1 samples, 0.04%)</title><rect x="12.2" y="979.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.2" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (1 samples, 0.04%)</title><rect x="12.2" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.2" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.newByteBuf (1 samples, 0.04%)</title><rect x="12.2" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInstance (1 samples, 0.04%)</title><rect x="12.2" y="931.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.reuse (1 samples, 0.04%)</title><rect x="12.2" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.2" y="926.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.resetRefCnt (1 samples, 0.04%)</title><rect x="12.2" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.resetRefCnt (1 samples, 0.04%)</title><rect x="12.2" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.set (1 samples, 0.04%)</title><rect x="12.2" y="867.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,698 samples, 98.65%)</title><rect x="12.6" y="1267.0" width="1164.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,698 samples, 98.65%)</title><rect x="12.6" y="1251.0" width="1164.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>MultiThread$$Lambda$1/303563356.run (2,698 samples, 98.65%)</title><rect x="12.6" y="1235.0" width="1164.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="1246.0">MultiThread$$Lambda$1/303563356.run</text>
</g>
<g>
<title>MultiThread.lambda$main$0 (2,698 samples, 98.65%)</title><rect x="12.6" y="1219.0" width="1164.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1230.0">MultiThread.lambda$main$0</text>
</g>
<g>
<title>java/lang/Thread.sleep (2,696 samples, 98.57%)</title><rect x="13.5" y="1203.0" width="1163.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="1214.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (2,676 samples, 97.84%)</title><rect x="22.1" y="1187.0" width="1154.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="25.1" y="1198.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.11%)</title><rect x="22.9" y="1171.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.9" y="1182.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (4 samples, 0.15%)</title><rect x="24.2" y="1171.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="27.2" y="1182.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="25.5" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.5" y="1166.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.04%)</title><rect x="25.5" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="28.5" y="1150.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (1 samples, 0.04%)</title><rect x="26.0" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="29.0" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="26.4" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.4" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.04%)</title><rect x="26.8" y="1171.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="29.8" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.04%)</title><rect x="27.3" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="30.3" y="1182.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2,663 samples, 97.37%)</title><rect x="27.7" y="1171.0" width="1148.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.7" y="1182.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>JavaThread::check_and_wait_while_suspended() (2 samples, 0.07%)</title><rect x="27.7" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="30.7" y="1166.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.07%)</title><rect x="27.7" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="30.7" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="28.1" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="31.1" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="28.1" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="31.1" y="1118.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="28.1" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.1" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="28.6" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="31.6" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2,655 samples, 97.07%)</title><rect x="29.0" y="1155.0" width="1145.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="32.0" y="1166.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (19 samples, 0.69%)</title><rect x="29.4" y="1139.0" width="8.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="32.4" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (2,614 samples, 95.58%)</title><rect x="37.6" y="1139.0" width="1127.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="40.6" y="1150.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.37%)</title><rect x="1165.4" y="1139.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1168.4" y="1150.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (7 samples, 0.26%)</title><rect x="1165.8" y="1123.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1168.8" y="1134.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.07%)</title><rect x="1168.9" y="1123.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1171.9" y="1134.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="1169.7" y="1139.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1172.7" y="1150.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1170.2" y="1139.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1173.2" y="1150.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="1170.2" y="1123.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1173.2" y="1134.0"></text>
</g>
<g>
<title>mutex (9 samples, 0.33%)</title><rect x="1170.6" y="1139.0" width="3.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1173.6" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.18%)</title><rect x="1174.5" y="1155.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>_res (4 samples, 0.15%)</title><rect x="1174.9" y="1139.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.9" y="1150.0"></text>
</g>
<g>
<title>thread_start (31 samples, 1.13%)</title><rect x="1176.6" y="1283.0" width="13.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1179.6" y="1294.0"></text>
</g>
<g>
<title>_pthread_start (31 samples, 1.13%)</title><rect x="1176.6" y="1267.0" width="13.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1179.6" y="1278.0"></text>
</g>
<g>
<title>_pthread_body (31 samples, 1.13%)</title><rect x="1176.6" y="1251.0" width="13.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1179.6" y="1262.0"></text>
</g>
<g>
<title>java_start(Thread*) (31 samples, 1.13%)</title><rect x="1176.6" y="1235.0" width="13.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1179.6" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (14 samples, 0.51%)</title><rect x="1176.6" y="1219.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (14 samples, 0.51%)</title><rect x="1176.6" y="1203.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (13 samples, 0.48%)</title><rect x="1176.6" y="1187.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 0.44%)</title><rect x="1176.6" y="1171.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="1182.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.07%)</title><rect x="1176.6" y="1155.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="1166.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (2 samples, 0.07%)</title><rect x="1176.6" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1150.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.04%)</title><rect x="1176.6" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.04%)</title><rect x="1176.6" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.04%)</title><rect x="1176.6" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1176.6" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.04%)</title><rect x="1176.6" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="1070.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.04%)</title><rect x="1176.6" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.04%)</title><rect x="1176.6" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.04%)</title><rect x="1176.6" y="1011.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1177.1" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1177.1" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1177.1" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1177.1" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1177.1" y="1059.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1177.1" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="1054.0"></text>
</g>
<g>
<title>Compile::should_delay_boxing_inlining(ciMethod*, JVMState*) (1 samples, 0.04%)</title><rect x="1177.1" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (10 samples, 0.37%)</title><rect x="1177.5" y="1155.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (10 samples, 0.37%)</title><rect x="1177.5" y="1139.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (10 samples, 0.37%)</title><rect x="1177.5" y="1123.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 0.33%)</title><rect x="1177.5" y="1107.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 0.18%)</title><rect x="1177.5" y="1091.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 0.18%)</title><rect x="1177.5" y="1075.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 0.18%)</title><rect x="1177.5" y="1059.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 0.18%)</title><rect x="1177.5" y="1043.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="1054.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1177.5" y="1027.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="1038.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1177.5" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1022.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.04%)</title><rect x="1177.5" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1177.5" y="979.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1177.5" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.04%)</title><rect x="1177.5" y="947.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.04%)</title><rect x="1177.5" y="931.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.04%)</title><rect x="1177.5" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.15%)</title><rect x="1177.9" y="1027.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.11%)</title><rect x="1177.9" y="1011.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.11%)</title><rect x="1177.9" y="995.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.04%)</title><rect x="1177.9" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="990.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1177.9" y="963.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="974.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1177.9" y="947.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1177.9" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.07%)</title><rect x="1178.4" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.07%)</title><rect x="1178.4" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.07%)</title><rect x="1178.4" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.07%)</title><rect x="1178.4" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.07%)</title><rect x="1178.4" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1178.4" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1178.4" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1178.4" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1178.4" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1178.4" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1178.4" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.4" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.4" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.04%)</title><rect x="1178.4" y="771.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1178.8" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.8" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.8" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1178.8" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.04%)</title><rect x="1178.8" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1178.8" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="1178.8" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.04%)</title><rect x="1178.8" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>Instruction::as_BlockEnd() (1 samples, 0.04%)</title><rect x="1179.2" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.04%)</title><rect x="1179.6" y="1091.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1179.6" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::code_offset() const (1 samples, 0.04%)</title><rect x="1179.6" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.07%)</title><rect x="1180.1" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1102.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.04%)</title><rect x="1180.1" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1180.1" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (1 samples, 0.04%)</title><rect x="1180.1" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.04%)</title><rect x="1180.1" y="1027.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="1038.0"></text>
</g>
<g>
<title>Values::grow(int, Instruction*) (1 samples, 0.04%)</title><rect x="1180.1" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.04%)</title><rect x="1180.5" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.04%)</title><rect x="1180.5" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.04%)</title><rect x="1180.5" y="1043.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.04%)</title><rect x="1180.5" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.04%)</title><rect x="1180.5" y="1011.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.04%)</title><rect x="1180.9" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="1102.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.04%)</title><rect x="1180.9" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1086.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1180.9" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1070.0"></text>
</g>
<g>
<title>DataLayout::data_in() (1 samples, 0.04%)</title><rect x="1180.9" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.04%)</title><rect x="1181.4" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="1181.4" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.04%)</title><rect x="1181.4" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="1086.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.04%)</title><rect x="1181.4" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="1070.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.04%)</title><rect x="1181.4" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="1054.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.04%)</title><rect x="1181.4" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="1038.0"></text>
</g>
<g>
<title>CodeBuffer::compute_final_layout(CodeBuffer*) const (1 samples, 0.04%)</title><rect x="1181.4" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.04%)</title><rect x="1181.8" y="1171.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1181.8" y="1155.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1181.8" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="1181.8" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1181.8" y="1107.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1182.2" y="1187.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="1198.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.04%)</title><rect x="1182.2" y="1171.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.04%)</title><rect x="1182.2" y="1155.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1166.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.04%)</title><rect x="1182.2" y="1139.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.04%)</title><rect x="1182.2" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1134.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.11%)</title><rect x="1182.7" y="1219.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="1230.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.11%)</title><rect x="1182.7" y="1203.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="1214.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1182.7" y="1187.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1182.7" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="1182.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1182.7" y="1155.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1166.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1182.7" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="1150.0"></text>
</g>
<g>
<title>StackFrameStream::next() (1 samples, 0.04%)</title><rect x="1182.7" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1134.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1182.7" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1182.7" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="1102.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (2 samples, 0.07%)</title><rect x="1183.1" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="1198.0"></text>
</g>
<g>
<title>_res (1 samples, 0.04%)</title><rect x="1183.1" y="1171.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1186.1" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1183.5" y="1171.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="1182.0"></text>
</g>
<g>
<title>WatcherThread::run() (14 samples, 0.51%)</title><rect x="1184.0" y="1219.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="1230.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (14 samples, 0.51%)</title><rect x="1184.0" y="1203.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (14 samples, 0.51%)</title><rect x="1184.0" y="1187.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (14 samples, 0.51%)</title><rect x="1184.0" y="1171.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (14 samples, 0.51%)</title><rect x="1184.0" y="1155.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.51%)</title><rect x="1184.0" y="1139.0" width="6.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1187.0" y="1150.0"></text>
</g>
</g>
</svg>
