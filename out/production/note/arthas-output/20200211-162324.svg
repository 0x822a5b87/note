<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (294 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>HotSpot.main (233 samples, 79.25%)</title><rect x="10.0" y="995.0" width="935.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1006.0">HotSpot.main</text>
</g>
<g>
<title>HotSpot.anotherInvoke (78 samples, 26.53%)</title><rect x="14.0" y="979.0" width="313.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.0" y="990.0">HotSpot.anotherInvoke</text>
</g>
<g>
<title>HotSpot.hotMethod (76 samples, 25.85%)</title><rect x="22.0" y="963.0" width="305.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.0" y="974.0">HotSpot.hotMethod</text>
</g>
<g>
<title>java/lang/Thread.sleep (76 samples, 25.85%)</title><rect x="22.0" y="947.0" width="305.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="958.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (74 samples, 25.17%)</title><rect x="22.0" y="931.0" width="297.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="25.0" y="942.0">JVM_Sleep</text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.34%)</title><rect x="22.0" y="915.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="25.0" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="26.1" y="915.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.1" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (72 samples, 24.49%)</title><rect x="30.1" y="915.0" width="288.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="33.1" y="926.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>JavaThread::check_and_wait_while_suspended() (2 samples, 0.68%)</title><rect x="30.1" y="899.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="33.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.34%)</title><rect x="30.1" y="883.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="33.1" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.34%)</title><rect x="30.1" y="867.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="33.1" y="878.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.34%)</title><rect x="34.1" y="883.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="37.1" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (69 samples, 23.47%)</title><rect x="38.1" y="899.0" width="276.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="41.1" y="910.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.68%)</title><rect x="42.1" y="883.0" width="8.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="45.1" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (63 samples, 21.43%)</title><rect x="50.1" y="883.0" width="252.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="53.1" y="894.0">__psynch_cvwait</text>
</g>
<g>
<title>mutex (2 samples, 0.68%)</title><rect x="303.0" y="883.0" width="8.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="306.0" y="894.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.34%)</title><rect x="311.0" y="883.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="314.0" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.34%)</title><rect x="315.0" y="899.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="318.0" y="910.0"></text>
</g>
<g>
<title>_res (1 samples, 0.34%)</title><rect x="315.0" y="883.0" width="4.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="318.0" y="894.0"></text>
</g>
<g>
<title>JavaThreadSleepState::~JavaThreadSleepState() (2 samples, 0.68%)</title><rect x="319.0" y="931.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="322.0" y="942.0"></text>
</g>
<g>
<title>HotSpot.invoke0 (80 samples, 27.21%)</title><rect x="327.1" y="979.0" width="321.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.1" y="990.0">HotSpot.invoke0</text>
</g>
<g>
<title>HotSpot.hotMethod (79 samples, 26.87%)</title><rect x="331.1" y="963.0" width="317.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.1" y="974.0">HotSpot.hotMethod</text>
</g>
<g>
<title>java/lang/Thread.sleep (79 samples, 26.87%)</title><rect x="331.1" y="947.0" width="317.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.1" y="958.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (73 samples, 24.83%)</title><rect x="351.2" y="931.0" width="292.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="354.2" y="942.0">JVM_Sleep</text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.34%)</title><rect x="351.2" y="915.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="354.2" y="926.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.34%)</title><rect x="351.2" y="899.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="354.2" y="910.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (72 samples, 24.49%)</title><rect x="355.2" y="915.0" width="288.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="358.2" y="926.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>JavaThread::check_and_wait_while_suspended() (1 samples, 0.34%)</title><rect x="359.2" y="899.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.2" y="910.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.34%)</title><rect x="359.2" y="883.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="362.2" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="359.2" y="867.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="362.2" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="359.2" y="851.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="362.2" y="862.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.34%)</title><rect x="359.2" y="835.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="362.2" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (69 samples, 23.47%)</title><rect x="363.2" y="899.0" width="276.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="366.2" y="910.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (4 samples, 1.36%)</title><rect x="367.2" y="883.0" width="16.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="370.2" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (60 samples, 20.41%)</title><rect x="383.3" y="883.0" width="240.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="386.3" y="894.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.68%)</title><rect x="624.1" y="883.0" width="8.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="627.1" y="894.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.34%)</title><rect x="632.1" y="883.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="635.1" y="894.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.34%)</title><rect x="632.1" y="867.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="635.1" y="878.0"></text>
</g>
<g>
<title>_res (1 samples, 0.34%)</title><rect x="632.1" y="851.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="635.1" y="862.0"></text>
</g>
<g>
<title>svcudp_op (1 samples, 0.34%)</title><rect x="636.1" y="883.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="639.1" y="894.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.34%)</title><rect x="640.1" y="899.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="643.1" y="910.0"></text>
</g>
<g>
<title>JavaThreadSleepState::~JavaThreadSleepState() (1 samples, 0.34%)</title><rect x="644.1" y="931.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="647.1" y="942.0"></text>
</g>
<g>
<title>HotSpot.yetAnotherInvoke (73 samples, 24.83%)</title><rect x="648.2" y="979.0" width="293.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.2" y="990.0">HotSpot.yetAnotherInvoke</text>
</g>
<g>
<title>HotSpot.hotMethod (73 samples, 24.83%)</title><rect x="648.2" y="963.0" width="293.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.2" y="974.0">HotSpot.hotMethod</text>
</g>
<g>
<title>java/lang/Thread.sleep (73 samples, 24.83%)</title><rect x="648.2" y="947.0" width="293.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="651.2" y="958.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (70 samples, 23.81%)</title><rect x="660.2" y="931.0" width="281.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="663.2" y="942.0">JVM_Sleep</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="660.2" y="915.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.2" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="664.2" y="915.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="667.2" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (68 samples, 23.13%)</title><rect x="668.2" y="915.0" width="273.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.2" y="926.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>JavaThread::check_and_wait_while_suspended() (1 samples, 0.34%)</title><rect x="668.2" y="899.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.2" y="910.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.34%)</title><rect x="668.2" y="883.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="671.2" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="668.2" y="867.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="671.2" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="668.2" y="851.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.2" y="862.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.34%)</title><rect x="668.2" y="835.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="671.2" y="846.0"></text>
</g>
<g>
<title>YieldingFlexibleGangWorker::~YieldingFlexibleGangWorker() (1 samples, 0.34%)</title><rect x="672.2" y="899.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="675.2" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (65 samples, 22.11%)</title><rect x="676.3" y="899.0" width="260.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="679.3" y="910.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (4 samples, 1.36%)</title><rect x="680.3" y="883.0" width="16.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="683.3" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (57 samples, 19.39%)</title><rect x="696.3" y="883.0" width="228.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="699.3" y="894.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.68%)</title><rect x="925.1" y="883.0" width="8.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="928.1" y="894.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.34%)</title><rect x="933.1" y="883.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="936.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.34%)</title><rect x="937.1" y="899.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.1" y="910.0"></text>
</g>
<g>
<title>_res (1 samples, 0.34%)</title><rect x="937.1" y="883.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="940.1" y="894.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.34%)</title><rect x="941.2" y="979.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.2" y="990.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.68%)</title><rect x="945.2" y="995.0" width="8.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="948.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (9 samples, 3.06%)</title><rect x="953.2" y="995.0" width="36.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.2" y="1006.0">jav..</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (9 samples, 3.06%)</title><rect x="953.2" y="979.0" width="36.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="956.2" y="990.0">io/..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (9 samples, 3.06%)</title><rect x="953.2" y="963.0" width="36.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.2" y="974.0">io/..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (9 samples, 3.06%)</title><rect x="953.2" y="947.0" width="36.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="956.2" y="958.0">io/..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (9 samples, 3.06%)</title><rect x="953.2" y="931.0" width="36.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.2" y="942.0">io/..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (1 samples, 0.34%)</title><rect x="953.2" y="915.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.2" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (1 samples, 0.34%)</title><rect x="953.2" y="899.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.2" y="910.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (1 samples, 0.34%)</title><rect x="953.2" y="883.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.2" y="894.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (1 samples, 0.34%)</title><rect x="953.2" y="867.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.2" y="878.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="851.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.2" y="862.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="835.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="956.2" y="846.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="819.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="956.2" y="830.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (1 samples, 0.34%)</title><rect x="953.2" y="803.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.2" y="814.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="787.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.2" y="798.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="771.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.2" y="782.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.34%)</title><rect x="953.2" y="755.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.2" y="766.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelRead (1 samples, 0.34%)</title><rect x="953.2" y="739.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.2" y="750.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.receive (1 samples, 0.34%)</title><rect x="953.2" y="723.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.2" y="734.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushDataIfNecessary (1 samples, 0.34%)</title><rect x="953.2" y="707.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.2" y="718.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (1 samples, 0.34%)</title><rect x="953.2" y="691.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.2" y="702.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (1 samples, 0.34%)</title><rect x="953.2" y="675.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.2" y="686.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.34%)</title><rect x="953.2" y="659.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.2" y="670.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.34%)</title><rect x="953.2" y="643.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.2" y="654.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.34%)</title><rect x="953.2" y="627.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.2" y="638.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.34%)</title><rect x="953.2" y="611.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.2" y="622.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.34%)</title><rect x="953.2" y="595.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.2" y="606.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.34%)</title><rect x="953.2" y="579.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="956.2" y="590.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.34%)</title><rect x="953.2" y="563.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.2" y="574.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.34%)</title><rect x="953.2" y="547.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.2" y="558.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (1 samples, 0.34%)</title><rect x="953.2" y="531.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.2" y="542.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (1 samples, 0.34%)</title><rect x="953.2" y="515.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.2" y="526.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (1 samples, 0.34%)</title><rect x="953.2" y="499.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="956.2" y="510.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (1 samples, 0.34%)</title><rect x="953.2" y="483.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.2" y="494.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.apply (1 samples, 0.34%)</title><rect x="953.2" y="467.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.2" y="478.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$000 (1 samples, 0.34%)</title><rect x="953.2" y="451.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="956.2" y="462.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.end (1 samples, 0.34%)</title><rect x="953.2" y="435.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.2" y="446.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.34%)</title><rect x="953.2" y="419.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.2" y="430.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.34%)</title><rect x="953.2" y="403.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.2" y="414.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.34%)</title><rect x="953.2" y="387.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.2" y="398.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.34%)</title><rect x="953.2" y="371.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.2" y="382.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.createJob (1 samples, 0.34%)</title><rect x="953.2" y="355.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.2" y="366.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/impl/ShellImpl.createJob (1 samples, 0.34%)</title><rect x="953.2" y="339.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.2" y="350.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.createJob (1 samples, 0.34%)</title><rect x="953.2" y="323.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.2" y="334.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobControllerImpl.createJob (1 samples, 0.34%)</title><rect x="953.2" y="307.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.2" y="318.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobControllerImpl.createProcess (1 samples, 0.34%)</title><rect x="953.2" y="291.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.2" y="302.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.getCommand (1 samples, 0.34%)</title><rect x="953.2" y="275.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="956.2" y="286.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.getCommand (1 samples, 0.34%)</title><rect x="953.2" y="259.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.2" y="270.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.name (1 samples, 0.34%)</title><rect x="953.2" y="243.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.2" y="254.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.shouldOverridesName (1 samples, 0.34%)</title><rect x="953.2" y="227.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethod (1 samples, 0.34%)</title><rect x="953.2" y="211.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.2" y="222.0"></text>
</g>
<g>
<title>java/lang/NoSuchMethodException.&lt;init&gt; (1 samples, 0.34%)</title><rect x="953.2" y="195.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ReflectiveOperationException.&lt;init&gt; (1 samples, 0.34%)</title><rect x="953.2" y="179.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.2" y="190.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.34%)</title><rect x="953.2" y="163.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.2" y="174.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.34%)</title><rect x="953.2" y="147.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.2" y="158.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.34%)</title><rect x="953.2" y="131.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.2" y="142.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.34%)</title><rect x="953.2" y="115.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.2" y="126.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.34%)</title><rect x="953.2" y="99.0" width="4.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="956.2" y="110.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.34%)</title><rect x="953.2" y="83.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="956.2" y="94.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (1 samples, 0.34%)</title><rect x="953.2" y="67.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.2" y="78.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (1 samples, 0.34%)</title><rect x="953.2" y="51.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.2" y="62.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.34%)</title><rect x="953.2" y="35.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.2" y="46.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.select (7 samples, 2.38%)</title><rect x="957.2" y="915.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="960.2" y="926.0">io..</text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.select (7 samples, 2.38%)</title><rect x="957.2" y="899.0" width="28.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.2" y="910.0">io..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (7 samples, 2.38%)</title><rect x="957.2" y="883.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="960.2" y="894.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (6 samples, 2.04%)</title><rect x="961.2" y="867.0" width="24.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.2" y="878.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (6 samples, 2.04%)</title><rect x="961.2" y="851.0" width="24.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.2" y="862.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (5 samples, 1.70%)</title><rect x="961.2" y="835.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (5 samples, 1.70%)</title><rect x="961.2" y="819.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.2" y="830.0"></text>
</g>
<g>
<title>kevent (5 samples, 1.70%)</title><rect x="961.2" y="803.0" width="20.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="964.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.34%)</title><rect x="981.3" y="835.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="984.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.34%)</title><rect x="981.3" y="819.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="984.3" y="830.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (1 samples, 0.34%)</title><rect x="985.3" y="915.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="988.3" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.pollTask (1 samples, 0.34%)</title><rect x="985.3" y="899.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="988.3" y="910.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTask (1 samples, 0.34%)</title><rect x="985.3" y="883.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="988.3" y="894.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTaskFrom (1 samples, 0.34%)</title><rect x="985.3" y="867.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="988.3" y="878.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.poll (1 samples, 0.34%)</title><rect x="985.3" y="851.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="988.3" y="862.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueueProducerFields.lvProducerIndex (1 samples, 0.34%)</title><rect x="985.3" y="835.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="988.3" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.34%)</title><rect x="985.3" y="819.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.3" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.34%)</title><rect x="985.3" y="803.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="814.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="985.3" y="787.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.3" y="798.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="985.3" y="771.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.3" y="782.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.34%)</title><rect x="985.3" y="755.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="766.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.34%)</title><rect x="985.3" y="739.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.3" y="750.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.34%)</title><rect x="985.3" y="723.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.3" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.34%)</title><rect x="985.3" y="707.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.34%)</title><rect x="985.3" y="691.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.3" y="702.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.34%)</title><rect x="985.3" y="675.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="988.3" y="686.0"></text>
</g>
<g>
<title>thread_start (50 samples, 17.01%)</title><rect x="989.3" y="995.0" width="200.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="992.3" y="1006.0">thread_start</text>
</g>
<g>
<title>_pthread_start (50 samples, 17.01%)</title><rect x="989.3" y="979.0" width="200.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="992.3" y="990.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (50 samples, 17.01%)</title><rect x="989.3" y="963.0" width="200.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="992.3" y="974.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (50 samples, 17.01%)</title><rect x="989.3" y="947.0" width="200.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="992.3" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (5 samples, 1.70%)</title><rect x="989.3" y="931.0" width="20.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.3" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 1.70%)</title><rect x="989.3" y="915.0" width="20.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.3" y="926.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 1.70%)</title><rect x="989.3" y="899.0" width="20.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.3" y="910.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.68%)</title><rect x="989.3" y="883.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.3" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.68%)</title><rect x="989.3" y="867.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.3" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.68%)</title><rect x="989.3" y="851.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.3" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.68%)</title><rect x="989.3" y="835.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.34%)</title><rect x="989.3" y="819.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.3" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.34%)</title><rect x="989.3" y="803.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.3" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.34%)</title><rect x="989.3" y="787.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.3" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.34%)</title><rect x="989.3" y="771.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.3" y="782.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.34%)</title><rect x="989.3" y="755.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.3" y="766.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.34%)</title><rect x="989.3" y="739.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.3" y="750.0"></text>
</g>
<g>
<title>GenerateOopMap::do_interpretation() (1 samples, 0.34%)</title><rect x="989.3" y="723.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.3" y="734.0"></text>
</g>
<g>
<title>GenerateOopMap::init_basic_blocks() (1 samples, 0.34%)</title><rect x="989.3" y="707.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.3" y="718.0"></text>
</g>
<g>
<title>GenerateOopMap::mark_reachable_code() (1 samples, 0.34%)</title><rect x="989.3" y="691.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.3" y="702.0"></text>
</g>
<g>
<title>GenerateOopMap::jump_targets_do(BytecodeStream*, void (*)(GenerateOopMap*, int, int*), int*) (1 samples, 0.34%)</title><rect x="989.3" y="675.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.3" y="686.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.34%)</title><rect x="993.3" y="819.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="830.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (1 samples, 0.34%)</title><rect x="993.3" y="803.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="814.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.34%)</title><rect x="993.3" y="787.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 1.02%)</title><rect x="997.3" y="883.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.3" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 1.02%)</title><rect x="997.3" y="867.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.3" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 1.02%)</title><rect x="997.3" y="851.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.3" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.02%)</title><rect x="997.3" y="835.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.3" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 1.02%)</title><rect x="997.3" y="819.0" width="12.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1000.3" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.34%)</title><rect x="1009.4" y="931.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.4" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.34%)</title><rect x="1009.4" y="915.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.4" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.34%)</title><rect x="1009.4" y="899.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.4" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.34%)</title><rect x="1009.4" y="883.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.4" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.34%)</title><rect x="1009.4" y="867.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.4" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.34%)</title><rect x="1009.4" y="851.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1012.4" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (43 samples, 14.63%)</title><rect x="1013.4" y="931.0" width="172.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.4" y="942.0">WatcherThread::run()</text>
</g>
<g>
<title>WatcherThread::sleep() const (43 samples, 14.63%)</title><rect x="1013.4" y="915.0" width="172.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.4" y="926.0">WatcherThread::sleep()..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (43 samples, 14.63%)</title><rect x="1013.4" y="899.0" width="172.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.4" y="910.0">Monitor::wait(bool, lo..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (42 samples, 14.29%)</title><rect x="1013.4" y="883.0" width="168.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.4" y="894.0">Monitor::IWait(Thread*..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (42 samples, 14.29%)</title><rect x="1013.4" y="867.0" width="168.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.4" y="878.0">os::PlatformEvent::par..</text>
</g>
<g>
<title>__psynch_cvwait (42 samples, 14.29%)</title><rect x="1013.4" y="851.0" width="168.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1016.4" y="862.0">__psynch_cvwait</text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.34%)</title><rect x="1182.0" y="883.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>is_error_reported() (1 samples, 0.34%)</title><rect x="1186.0" y="931.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1189.0" y="942.0"></text>
</g>
</g>
</svg>
